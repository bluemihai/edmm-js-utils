{ version: '4.1.1',
  bisect: [Function],
  bisectRight: [Function],
  bisectLeft: [Function],
  ascending: [Function: ascending],
  bisector: [Function: bisector],
  descending: [Function: descending],
  deviation: [Function: deviation],
  extent: [Function: extent],
  histogram: [Function: histogram],
  thresholdFreedmanDiaconis: [Function: freedmanDiaconis],
  thresholdScott: [Function: scott],
  thresholdSturges: [Function: sturges],
  max: [Function: max],
  mean: [Function: mean],
  median: [Function: median],
  merge: [Function: merge],
  min: [Function: min],
  pairs: [Function: pairs],
  permute: [Function: permute],
  quantile: [Function: quantile],
  range: [Function: range],
  scan: [Function: scan],
  shuffle: [Function: shuffle],
  sum: [Function: sum],
  ticks: [Function: ticks],
  tickStep: [Function: tickStep],
  transpose: [Function: transpose],
  variance: [Function: variance],
  zip: [Function: zip],
  entries: [Function: entries],
  keys: [Function: keys],
  values: [Function: values],
  map: [Function: map],
  set: [Function: set],
  nest: [Function: nest],
  randomUniform: [Function: uniform],
  randomNormal: [Function: normal],
  randomLogNormal: [Function: logNormal],
  randomBates: [Function: bates],
  randomIrwinHall: [Function: irwinHall],
  randomExponential: [Function: exponential],
  easeLinear: [Function: linear],
  easeQuad: [Function: quadInOut],
  easeQuadIn: [Function: quadIn],
  easeQuadOut: [Function: quadOut],
  easeQuadInOut: [Function: quadInOut],
  easeCubic: [Function: cubicInOut],
  easeCubicIn: [Function: cubicIn],
  easeCubicOut: [Function: cubicOut],
  easeCubicInOut: [Function: cubicInOut],
  easePoly: { [Function: polyInOut] exponent: [Function: custom] },
  easePolyIn: { [Function: polyIn] exponent: [Function: custom] },
  easePolyOut: { [Function: polyOut] exponent: [Function: custom] },
  easePolyInOut: { [Function: polyInOut] exponent: [Function: custom] },
  easeSin: [Function: sinInOut],
  easeSinIn: [Function: sinIn],
  easeSinOut: [Function: sinOut],
  easeSinInOut: [Function: sinInOut],
  easeExp: [Function: expInOut],
  easeExpIn: [Function: expIn],
  easeExpOut: [Function: expOut],
  easeExpInOut: [Function: expInOut],
  easeCircle: [Function: circleInOut],
  easeCircleIn: [Function: circleIn],
  easeCircleOut: [Function: circleOut],
  easeCircleInOut: [Function: circleInOut],
  easeBounce: [Function: bounceOut],
  easeBounceIn: [Function: bounceIn],
  easeBounceOut: [Function: bounceOut],
  easeBounceInOut: [Function: bounceInOut],
  easeBack: { [Function: backInOut] overshoot: [Function: custom] },
  easeBackIn: { [Function: backIn] overshoot: [Function: custom] },
  easeBackOut: { [Function: backOut] overshoot: [Function: custom] },
  easeBackInOut: { [Function: backInOut] overshoot: [Function: custom] },
  easeElastic: { [Function: elasticOut] amplitude: [Function], period: [Function] },
  easeElasticIn: { [Function: elasticIn] amplitude: [Function], period: [Function] },
  easeElasticOut: { [Function: elasticOut] amplitude: [Function], period: [Function] },
  easeElasticInOut: { [Function: elasticInOut] amplitude: [Function], period: [Function] },
  polygonArea: [Function: area],
  polygonCentroid: [Function: centroid],
  polygonHull: [Function: hull],
  polygonContains: [Function: contains],
  polygonLength: [Function: length],
  path: [Function: path],
  quadtree: [Function: quadtree],
  queue: [Function: queue],
  arc: [Function: arc],
  area: [Function: area],
  line: [Function: line],
  pie: [Function: pie],
  radialArea: [Function: radialArea],
  radialLine: [Function: radialLine$1],
  symbol: [Function: symbol],
  symbols:
   [ { draw: [Function] },
     { draw: [Function] },
     { draw: [Function] },
     { draw: [Function] },
     { draw: [Function] },
     { draw: [Function] },
     { draw: [Function] } ],
  symbolCircle: { draw: [Function] },
  symbolCross: { draw: [Function] },
  symbolDiamond: { draw: [Function] },
  symbolSquare: { draw: [Function] },
  symbolStar: { draw: [Function] },
  symbolTriangle: { draw: [Function] },
  symbolWye: { draw: [Function] },
  curveBasisClosed: [Function: basisClosed],
  curveBasisOpen: [Function: basisOpen],
  curveBasis: [Function: basis],
  curveBundle: { [Function: bundle] beta: [Function] },
  curveCardinalClosed: { [Function: cardinal] tension: [Function] },
  curveCardinalOpen: { [Function: cardinal] tension: [Function] },
  curveCardinal: { [Function: cardinal] tension: [Function] },
  curveCatmullRomClosed: { [Function: catmullRom] alpha: [Function] },
  curveCatmullRomOpen: { [Function: catmullRom] alpha: [Function] },
  curveCatmullRom: { [Function: catmullRom] alpha: [Function] },
  curveLinearClosed: [Function: linearClosed],
  curveLinear: [Function: curveLinear],
  curveMonotoneX: [Function: monotoneX],
  curveMonotoneY: [Function: monotoneY],
  curveNatural: [Function: natural],
  curveStep: [Function: step],
  curveStepAfter: [Function: stepAfter],
  curveStepBefore: [Function: stepBefore],
  stack: [Function: stack],
  stackOffsetExpand: [Function: expand],
  stackOffsetNone: [Function: none],
  stackOffsetSilhouette: [Function: silhouette],
  stackOffsetWiggle: [Function: wiggle],
  stackOrderAscending: [Function: ascending],
  stackOrderDescending: [Function: descending$1],
  stackOrderInsideOut: [Function: insideOut],
  stackOrderNone: [Function: none$1],
  stackOrderReverse: [Function: reverse],
  color: [Function: color],
  rgb: [Function: rgb],
  hsl: [Function: hsl],
  lab: [Function: lab],
  hcl: [Function: hcl],
  cubehelix: [Function: cubehelix],
  interpolate: [Function: value],
  interpolateArray: [Function: array],
  interpolateDate: [Function: date],
  interpolateNumber: [Function: number],
  interpolateObject: [Function: object],
  interpolateRound: [Function: round],
  interpolateString: [Function: string],
  interpolateTransformCss: [Function],
  interpolateTransformSvg: [Function],
  interpolateZoom: [Function: zoom],
  interpolateRgb: { [Function: rgb] gamma: [Function: rgbGamma] },
  interpolateRgbBasis: [Function],
  interpolateRgbBasisClosed: [Function],
  interpolateHsl: [Function],
  interpolateHslLong: [Function],
  interpolateLab: [Function: lab$1],
  interpolateHcl: [Function],
  interpolateHclLong: [Function],
  interpolateCubehelix: { [Function: cubehelix] gamma: [Function: cubehelixGamma] },
  interpolateCubehelixLong: { [Function: cubehelix] gamma: [Function: cubehelixGamma] },
  interpolateBasis: [Function: basis$1],
  interpolateBasisClosed: [Function: basisClosed],
  quantize: [Function: quantize],
  dispatch: [Function: dispatch],
  dsvFormat: [Function: dsv],
  csvParse: [Function: parse],
  csvParseRows: [Function: parseRows],
  csvFormat: [Function: format],
  csvFormatRows: [Function: formatRows],
  tsvParse: [Function: parse],
  tsvParseRows: [Function: parseRows],
  tsvFormat: [Function: format],
  tsvFormatRows: [Function: formatRows],
  request: [Function: request],
  html: [Function],
  json: [Function],
  text: [Function],
  xml: [Function],
  csv: [Function],
  tsv: [Function],
  now: [Function: now],
  timer: [Function: timer],
  timerFlush: [Function: timerFlush],
  timeout: [Function: timeout$1],
  interval: [Function: interval$1],
  timeInterval: [Function: newInterval],
  timeMillisecond:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeMilliseconds: [Function],
  timeSecond:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeSeconds: [Function],
  timeMinute:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeMinutes: [Function],
  timeHour:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeHours: [Function],
  timeDay:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeDays: [Function],
  timeWeek:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeWeeks: [Function],
  timeSunday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeSundays: [Function],
  timeMonday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeMondays: [Function],
  timeTuesday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeTuesdays: [Function],
  timeWednesday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeWednesdays: [Function],
  timeThursday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeThursdays: [Function],
  timeFriday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeFridays: [Function],
  timeSaturday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeSaturdays: [Function],
  timeMonth:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeMonths: [Function],
  timeYear:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  timeYears: [Function],
  utcMillisecond:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcMilliseconds: [Function],
  utcSecond:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcSeconds: [Function],
  utcMinute:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcMinutes: [Function],
  utcHour:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcHours: [Function],
  utcDay:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcDays: [Function],
  utcWeek:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcWeeks: [Function],
  utcSunday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcSundays: [Function],
  utcMonday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcMondays: [Function],
  utcTuesday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcTuesdays: [Function],
  utcWednesday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcWednesdays: [Function],
  utcThursday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcThursdays: [Function],
  utcFriday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcFridays: [Function],
  utcSaturday:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcSaturdays: [Function],
  utcMonth:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcMonths: [Function],
  utcYear:
   { [Function: interval]
     floor: [Circular],
     ceil: [Function],
     round: [Function],
     offset: [Function],
     range: [Function],
     filter: [Function],
     count: [Function],
     every: [Function] },
  utcYears: [Function],
  format: [Function: newFormat],
  formatPrefix: [Function: formatPrefix],
  formatLocale: [Function: formatLocale],
  formatDefaultLocale: [Function: defaultLocale],
  formatSpecifier: [Function: formatSpecifier],
  precisionFixed: [Function: precisionFixed],
  precisionPrefix: [Function: precisionPrefix],
  precisionRound: [Function: precisionRound],
  timeFormat: [Function],
  timeParse: [Function],
  utcFormat: [Function],
  utcParse: [Function],
  isoFormat: [Function: formatIsoNative],
  isoParse: [Function: parseIsoNative],
  timeFormatLocale: [Function: formatLocale],
  timeFormatDefaultLocale: [Function: defaultLocale],
  scaleBand: [Function: band],
  scalePoint: [Function: point],
  scaleIdentity: [Function: identity],
  scaleLinear: [Function: linear],
  scaleLog: [Function: log],
  scaleOrdinal: [Function: ordinal],
  scaleImplicit: { name: 'implicit' },
  scalePow: [Function: pow],
  scaleSqrt: [Function: sqrt],
  scaleQuantile: [Function: quantile$1],
  scaleQuantize: [Function: quantize],
  scaleThreshold: [Function: threshold],
  scaleTime: [Function: time],
  scaleUtc: [Function: utcTime],
  schemeCategory10:
   [ '#1f77b4',
     '#ff7f0e',
     '#2ca02c',
     '#d62728',
     '#9467bd',
     '#8c564b',
     '#e377c2',
     '#7f7f7f',
     '#bcbd22',
     '#17becf' ],
  schemeCategory20b:
   [ '#393b79',
     '#5254a3',
     '#6b6ecf',
     '#9c9ede',
     '#637939',
     '#8ca252',
     '#b5cf6b',
     '#cedb9c',
     '#8c6d31',
     '#bd9e39',
     '#e7ba52',
     '#e7cb94',
     '#843c39',
     '#ad494a',
     '#d6616b',
     '#e7969c',
     '#7b4173',
     '#a55194',
     '#ce6dbd',
     '#de9ed6' ],
  schemeCategory20c:
   [ '#3182bd',
     '#6baed6',
     '#9ecae1',
     '#c6dbef',
     '#e6550d',
     '#fd8d3c',
     '#fdae6b',
     '#fdd0a2',
     '#31a354',
     '#74c476',
     '#a1d99b',
     '#c7e9c0',
     '#756bb1',
     '#9e9ac8',
     '#bcbddc',
     '#dadaeb',
     '#636363',
     '#969696',
     '#bdbdbd',
     '#d9d9d9' ],
  schemeCategory20:
   [ '#1f77b4',
     '#aec7e8',
     '#ff7f0e',
     '#ffbb78',
     '#2ca02c',
     '#98df8a',
     '#d62728',
     '#ff9896',
     '#9467bd',
     '#c5b0d5',
     '#8c564b',
     '#c49c94',
     '#e377c2',
     '#f7b6d2',
     '#7f7f7f',
     '#c7c7c7',
     '#bcbd22',
     '#dbdb8d',
     '#17becf',
     '#9edae5' ],
  scaleSequential: [Function: sequential],
  interpolateCubehelixDefault: [Function],
  interpolateRainbow: [Function: rainbow$1],
  interpolateWarm: [Function],
  interpolateCool: [Function],
  interpolateViridis: [Function],
  interpolateMagma: [Function],
  interpolateInferno: [Function],
  interpolatePlasma: [Function],
  creator: [Function: creator],
  customEvent: [Function: customEvent],
  local: [Function: local],
  matcher: [Function],
  mouse: [Function: mouse],
  namespace: [Function: namespace],
  namespaces:
   { svg: 'http://www.w3.org/2000/svg',
     xhtml: 'http://www.w3.org/1999/xhtml',
     xlink: 'http://www.w3.org/1999/xlink',
     xml: 'http://www.w3.org/XML/1998/namespace',
     xmlns: 'http://www.w3.org/2000/xmlns/' },
  select: [Function: select],
  selectAll: [Function: selectAll],
  selection: [Function: selection],
  selector: [Function: selector],
  selectorAll: [Function: selectorAll],
  touch: [Function: touch],
  touches: [Function: touches],
  window: [Function: defaultView],
  active: [Function: active],
  interrupt: [Function: interrupt],
  transition: [Function: transition],
  axisTop: [Function: axisTop],
  axisRight: [Function: axisRight],
  axisBottom: [Function: axisBottom],
  axisLeft: [Function: axisLeft],
  cluster: [Function: cluster],
  hierarchy: [Function: hierarchy],
  pack: [Function: index],
  packSiblings: [Function: siblings],
  packEnclose: [Function: enclose],
  partition: [Function: partition],
  stratify: [Function: stratify],
  tree: [Function: tree],
  treemap: [Function: index$1],
  treemapBinary: [Function: binary],
  treemapDice: [Function: treemapDice],
  treemapSlice: [Function: treemapSlice],
  treemapSliceDice: [Function: sliceDice],
  treemapSquarify: { [Function: squarify] ratio: [Function] },
  treemapResquarify: { [Function: resquarify] ratio: [Function] },
  forceCenter: [Function: center],
  forceCollide: [Function: collide],
  forceLink: [Function: link],
  forceManyBody: [Function: manyBody],
  forceSimulation: [Function: simulation],
  forceX: [Function: x$2],
  forceY: [Function: y$2],
  drag: [Function: drag],
  dragDisable: [Function: nodrag],
  dragEnable: [Function: yesdrag],
  voronoi: [Function: voronoi],
  zoom: [Function: zoom],
  zoomIdentity: Transform { k: 1, x: 0, y: 0 },
  zoomTransform: [Function: transform],
  brush: [Function: brush],
  brushX: [Function: brushX],
  brushY: [Function: brushY],
  brushSelection: [Function: brushSelection],
  chord: [Function: chord],
  ribbon: [Function: ribbon],
  geoAlbers: [Function: albers],
  geoAlbersUsa: [Function: albersUsa],
  geoArea: [Function: area],
  geoAzimuthalEqualArea: [Function: azimuthalEqualArea],
  geoAzimuthalEqualAreaRaw: { [Function] invert: [Function] },
  geoAzimuthalEquidistant: [Function: azimuthalEquidistant],
  geoAzimuthalEquidistantRaw: { [Function] invert: [Function] },
  geoBounds: [Function: bounds],
  geoCentroid: [Function: centroid],
  geoCircle: [Function: circle],
  geoClipExtent: [Function: extent],
  geoConicConformal: [Function: conicConformal],
  geoConicConformalRaw: [Function: conicConformalRaw],
  geoConicEqualArea: [Function: conicEqualArea],
  geoConicEqualAreaRaw: [Function: conicEqualAreaRaw],
  geoConicEquidistant: [Function: conicEquidistant],
  geoConicEquidistantRaw: [Function: conicEquidistantRaw],
  geoDistance: [Function: distance],
  geoEquirectangular: [Function: equirectangular],
  geoEquirectangularRaw: { [Function: equirectangularRaw] invert: [Circular] },
  geoGnomonic: [Function: gnomonic],
  geoGnomonicRaw: { [Function: gnomonicRaw] invert: [Function] },
  geoGraticule: [Function: graticule],
  geoInterpolate: [Function: interpolate],
  geoLength: [Function: length],
  geoMercator: [Function: mercator],
  geoMercatorRaw: { [Function: mercatorRaw] invert: [Function] },
  geoOrthographic: [Function: orthographic],
  geoOrthographicRaw: { [Function: orthographicRaw] invert: [Function] },
  geoPath: [Function: index],
  geoProjection: [Function: projection],
  geoProjectionMutator: [Function: projectionMutator],
  geoRotation: [Function: rotation],
  geoStereographic: [Function: stereographic],
  geoStereographicRaw: { [Function: stereographicRaw] invert: [Function] },
  geoStream: [Function: stream],
  geoTransform: [Function: transform],
  geoTransverseMercator: [Function: transverseMercator],
  geoTransverseMercatorRaw: { [Function: transverseMercatorRaw] invert: [Function] } }